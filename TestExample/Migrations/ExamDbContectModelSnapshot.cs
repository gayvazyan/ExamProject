// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestExample.Models;

namespace TestExample.Migrations
{
    [DbContext(typeof(ExamDbContect))]
    partial class ExamDbContectModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestExample.Models.CitizenReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("NumberTicket");

                    b.Property<string>("Passport");

                    b.Property<string>("PhoneNumber");

                    b.Property<double>("Result");

                    b.Property<string>("SecondName");

                    b.Property<DateTime>("TestDataTime");

                    b.HasKey("Id");

                    b.ToTable("DbCitizenReport");
                });

            modelBuilder.Entity("TestExample.MyModels.CitizenTestResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllAdditionallyDuringElDay");

                    b.Property<int>("AllMobileVoters");

                    b.Property<int>("AllSum");

                    b.Property<int>("AllTickets");

                    b.Property<int>("CEC");

                    b.Property<string>("Community")
                        .IsRequired();

                    b.Property<int>("ForA");

                    b.Property<int>("ForAx");

                    b.Property<int>("ForAy");

                    b.Property<int>("ForB");

                    b.Property<int>("ForBm");

                    b.Property<int>("ForBn");

                    b.Property<int>("ForC");

                    b.Property<int>("ForCk");

                    b.Property<int>("ForCl");

                    b.Property<int>("InvalidTickets");

                    b.Property<int>("NumberTicket");

                    b.Property<int>("NumerableTickets");

                    b.Property<int>("PartAdditionallyDuringElDay");

                    b.Property<int>("PartMobileVoters");

                    b.Property<int>("PartSum");

                    b.Property<int>("Participants");

                    b.Property<string>("Region")
                        .IsRequired();

                    b.Property<double>("Result");

                    b.Property<string>("TEC")
                        .IsRequired();

                    b.Property<int>("UnusedGlueTickets");

                    b.Property<int>("UnusedNumerableTickets");

                    b.Property<int>("VadTickets");

                    b.HasKey("Id");

                    b.ToTable("DbCitizenTestResults");
                });

            modelBuilder.Entity("TestExample.ViewModels.EmptyTextViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllAdditionallyDuringElDay");

                    b.Property<int>("AllMobileVoters");

                    b.Property<int>("CEC");

                    b.Property<string>("Community");

                    b.Property<int>("ForA");

                    b.Property<int>("ForAx");

                    b.Property<int>("ForAy");

                    b.Property<int>("ForB");

                    b.Property<int>("ForBm");

                    b.Property<int>("ForBn");

                    b.Property<int>("ForC");

                    b.Property<int>("ForCk");

                    b.Property<int>("ForCl");

                    b.Property<int>("InvalidTickets");

                    b.Property<int>("ListAll");

                    b.Property<int>("NumerableTickets");

                    b.Property<int>("PartMobileVoters");

                    b.Property<int>("Participants");

                    b.Property<string>("Region");

                    b.Property<string>("TEC");

                    b.Property<int>("TecGlueTickets");

                    b.Property<int>("TecNumerableTickets");

                    b.Property<int>("UnusedGlueTickets");

                    b.Property<int>("UnusedNumerableTickets");

                    b.Property<int>("VadTickets");

                    b.HasKey("Id");

                    b.ToTable("DbEmptyTextViewModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllAdditionallyDuringElDay = 3,
                            AllMobileVoters = 7,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 81,
                            ForAx = 31,
                            ForAy = 49,
                            ForB = 52,
                            ForBm = 23,
                            ForBn = 29,
                            ForC = 34,
                            ForCk = 27,
                            ForCl = 7,
                            InvalidTickets = 11,
                            ListAll = 250,
                            NumerableTickets = 5,
                            PartMobileVoters = 5,
                            Participants = 170,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 300,
                            TecNumerableTickets = 263,
                            UnusedGlueTickets = 122,
                            UnusedNumerableTickets = 258,
                            VadTickets = 173
                        },
                        new
                        {
                            Id = 2,
                            AllAdditionallyDuringElDay = 1,
                            AllMobileVoters = 3,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 120,
                            ForAx = 80,
                            ForAy = 40,
                            ForB = 280,
                            ForBm = 150,
                            ForBn = 130,
                            ForC = 213,
                            ForCk = 95,
                            ForCl = 118,
                            InvalidTickets = 11,
                            ListAll = 840,
                            NumerableTickets = 24,
                            PartMobileVoters = 3,
                            Participants = 620,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 900,
                            TecNumerableTickets = 882,
                            UnusedGlueTickets = 300,
                            UnusedNumerableTickets = 858,
                            VadTickets = 600
                        },
                        new
                        {
                            Id = 3,
                            AllAdditionallyDuringElDay = 2,
                            AllMobileVoters = 4,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 60,
                            ForAx = 20,
                            ForAy = 40,
                            ForB = 210,
                            ForBm = 170,
                            ForBn = 40,
                            ForC = 160,
                            ForCk = 90,
                            ForCl = 70,
                            InvalidTickets = 6,
                            ListAll = 510,
                            NumerableTickets = 8,
                            PartMobileVoters = 4,
                            Participants = 430,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 600,
                            TecNumerableTickets = 536,
                            UnusedGlueTickets = 164,
                            UnusedNumerableTickets = 528,
                            VadTickets = 428
                        },
                        new
                        {
                            Id = 4,
                            AllAdditionallyDuringElDay = 3,
                            AllMobileVoters = 5,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 100,
                            ForAx = 51,
                            ForAy = 49,
                            ForB = 320,
                            ForBm = 205,
                            ForBn = 115,
                            ForC = 72,
                            ForCk = 30,
                            ForCl = 42,
                            InvalidTickets = 15,
                            ListAll = 720,
                            NumerableTickets = 27,
                            PartMobileVoters = 4,
                            Participants = 500,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 800,
                            TecNumerableTickets = 756,
                            UnusedGlueTickets = 293,
                            UnusedNumerableTickets = 729,
                            VadTickets = 480
                        },
                        new
                        {
                            Id = 5,
                            AllAdditionallyDuringElDay = 2,
                            AllMobileVoters = 7,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 40,
                            ForAx = 13,
                            ForAy = 27,
                            ForB = 250,
                            ForBm = 150,
                            ForBn = 100,
                            ForC = 110,
                            ForCk = 45,
                            ForCl = 65,
                            InvalidTickets = 7,
                            ListAll = 420,
                            NumerableTickets = 17,
                            PartMobileVoters = 5,
                            Participants = 400,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 500,
                            TecNumerableTickets = 441,
                            UnusedGlueTickets = 93,
                            UnusedNumerableTickets = 424,
                            VadTickets = 390
                        },
                        new
                        {
                            Id = 6,
                            AllAdditionallyDuringElDay = 3,
                            AllMobileVoters = 10,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 300,
                            ForAx = 170,
                            ForAy = 130,
                            ForB = 290,
                            ForBm = 60,
                            ForBn = 230,
                            ForC = 236,
                            ForCk = 136,
                            ForCl = 100,
                            InvalidTickets = 15,
                            ListAll = 960,
                            NumerableTickets = 41,
                            PartMobileVoters = 8,
                            Participants = 830,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 1000,
                            TecNumerableTickets = 1008,
                            UnusedGlueTickets = 159,
                            UnusedNumerableTickets = 967,
                            VadTickets = 800
                        },
                        new
                        {
                            Id = 7,
                            AllAdditionallyDuringElDay = 3,
                            AllMobileVoters = 10,
                            CEC = 55,
                            Community = "Շիրակ",
                            ForA = 10,
                            ForAx = 5,
                            ForAy = 5,
                            ForB = 40,
                            ForBm = 10,
                            ForBn = 30,
                            ForC = 60,
                            ForCk = 40,
                            ForCl = 20,
                            InvalidTickets = 3,
                            ListAll = 120,
                            NumerableTickets = 18,
                            PartMobileVoters = 10,
                            Participants = 100,
                            Region = "Շիրակի",
                            TEC = "55/1",
                            TecGlueTickets = 200,
                            TecNumerableTickets = 126,
                            UnusedGlueTickets = 87,
                            UnusedNumerableTickets = 108,
                            VadTickets = 95
                        });
                });

            modelBuilder.Entity("TestExample.MyModels.CitizenUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Passport");

                    b.Property<string>("SecondName");

                    b.HasDiscriminator().HasValue("CitizenUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
